@model ChurchManager.Models.TransactionView

@{
    ViewBag.Title = "New Transaction";
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "createTransFormId" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.IsSplit)
    <div class="box box-default">
        <div class="box-header with-border">
            <div class="pull-left">
                @Html.LabelFor(model => model.AccountRegistryId, htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-10 ">
                    @Html.DropDownListFor(x => x.AccountRegistryId, Model.AccountOptions.GetAccountRegister(Model.AccountRegistryId.ToString()), "Select Account Register", new { @class = "form-control select" })

                    @Html.ValidationMessageFor(model => model.AccountRegistryId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="pull-right">
                <input type="submit" value="Save" class="btn btn-success" />
            </div>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
            <div class="row">
                <div class="col-md-2">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.TransactionDate, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.TransactionDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.TransactionDate, "", new { @class = "text-danger" })

                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payee, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Payee, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Payee, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Payment, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Payment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Payment, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Deposit, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Deposit, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Deposit, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2"></div>

            </div>

            <div id="divSingleTrans" class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(x => x.AccountId, Model.AccountOptions.GetAccounts(), "Select Account", new { @class = "form-control select" })
                        @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AccountFundId, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(x => x.AccountFundId, Model.AccountOptions.GetFunds(), "Select Fund", new { @class = "form-control select" })
                        @Html.ValidationMessageFor(model => model.AccountFundId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                    </div>

                </div>
                <div class="col-md-1">
                    <div class="pull-right" style="margin-top:23px">
                        @Ajax.ActionLink(
                            "Split", // <-- Text to display
                            "Split",// <-- Action/Method Name
                                "Transactions",//<!-- Controller Name
                                new { index = 0 },
                                new AjaxOptions
                                {
                                    UpdateTargetId = "tbody_splitBody", // <-- DOM element ID to update
                                    InsertionMode = InsertionMode.InsertAfter, // <-- Replace the content of DOM element
                                    HttpMethod = "GET", // <-- HTTP method
                                    //LoadingElementId = "divLoading", //Id of Loading GIF Image
                                    OnBegin = "onSplitBegin", //OnBegin JS Function
                                    //OnComplete = "onAjaxComplete" //OnComplete JS Function
                                    OnSuccess="onSplitSuccess"
                                },
                                new { @class = "btn btn-primary" } //-- Class
                                )


                        <input id="btnSplit" type="button" value="split" class="btn btn-primary" style="display:none" />
                    </div>
                </div>

            </div>

            <div id="div_splitBody" style="display:none" >
                <div class="pull-right">
                    <dl class="dl-horizontal">
                        <dt> <label for="SplitBalance" class=" col-form-label" style="align-self:center">Balance:</label></dt>
                        <dd>
                            <input id="SplitBalanceDisplay" type="text" readonly class="form-control" style="width:200px" />

                        </dd>

                    </dl>
                </div>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Account</th>
                            <th>Fund</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody id="tbody_splitBody">
                    </tbody>
                </table>


                <div id="div_split"></div>
                <div class="row">
                    <div class="col-md-12">
                        <input type="button" id="btnAddSplit" class="btn btn-primary" value="Add Another Row" />
                        @Ajax.ActionLink(
                            "Add Another Row", // <-- Text to display
                            "Split",// <-- Action/Method Name
                                "Transactions",//<!-- Controller Name
                                new { index = 0 },
                                new AjaxOptions
                                {
                                    UpdateTargetId = "tbody_splitBody", // <-- DOM element ID to update
                                    InsertionMode = InsertionMode.InsertAfter, // <-- Replace the content of DOM element
                                    HttpMethod = "GET", // <-- HTTP method
                                    //LoadingElementId = "divLoading", //Id of Loading GIF Image
                                    OnBegin = "onSplitBegin", //OnBegin JS Function
                                    //OnComplete = "onAjaxComplete" //OnComplete JS Function
                                    OnSuccess = "onSplitSuccess"
                                },
                                new { @class = "btn btn-primary" } //-- Class
                                )
                        <button id="btnCreate" onclick="RedirectToCreate() ;return false;" class="btn btn-default"><i class="fa fa-ban"></i> Cancel</button>

                    </div>
                </div>
            </div>


        </div>
        <!-- /.box-body -->
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryunobtrusive")

    <!-- bootstrap datepicker -->
    <script src="~/AdminLTE_2_4_2/bower_components/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
    <!-- Select2 -->
    <script src="~/AdminLTE_2_4_2/bower_components/select2/dist/js/select2.full.min.js"></script>

    <script type="text/javascript">

        var splitBalance = $('#SplitBalance');
        var splitBalanceDisplay = $('#SplitBalanceDisplay');

        $(document).ready(function () {
            //$.validator.unobtrusive.parse($("#createTransFormId"));

            //Initialize Select2 Elements
            $('.select2').select2();
            //Date picker
            $('#TransactionDate').datepicker({
                autoclose: true
            });

            var splitIndex = 0;
            $("#btnAddSplit").click(function () {

                DisableBalanceValidation();

                CalculateBalance();


                // $('#createTransFormId').validate();
                //$('#createTransFormId').valid();

                if ($('#createTransFormId').valid()) {
                    $.ajax({
                    url: '@Url.Action("Split", "Transactions")',
                    type: 'get',
                    data: { index: splitIndex },
                    success: function (response) {
                        splitIndex = splitIndex + 1;
                        $("#tbody_splitBody").append(response);

                        EnableBalanceValidation();
                    },
                    error: function (error) {
                        alert(error);
                        },
                    complete: function () {
                        $("#createTransFormId").each(function ()
                        {
                            alert('');
                            $.data($(this)[0], 'validator', false);
                        });
                        $.validator.unobtrusive.parse("#createTransFormId");

                   }
                });
                }

            });

            $("#btnSplit").click(function () {

                DisableBalanceValidation();

                CalculateBalance();

                //$('#createTransFormId').validate();
                //$('#createTransFormId').valid();

               $("#divSingleTrans").hide();
                $("#div_splitBody").show();

                document.getElementById('IsSplit').value = 'true';

                //add initial row
                $.ajax({
                    url: '@Url.Action("Split", "Transactions")',
                    type: 'get',
                    data: { index: splitIndex },
                    success: function (response) {
                        splitIndex = splitIndex + 1;
                        $("#tbody_splitBody").append(response);

                        //EnableBalanceValidation();
                    },
                    error: function (error) {
                        alert(error);
                    },
                    complete: function () {
                        $("#createTransFormId").each(function ()
                        {
                            alert('');
                            $.data($(this)[0], 'validator', false);
                        });
                        $.validator.unobtrusive.parse("#createTransFormId");

                   }
                });

            });




        });

        function EnableBalanceValidation() {
                splitBalanceDisplay.hide();
                splitBalance.show();
            }

            function DisableBalanceValidation() {
                splitBalanceDisplay.show();
                splitBalance.hide();
            }

        function CalculateBalance() {


                var depValue = $('input[name="Deposit"]').val();
                var payValue = $('input[name="Payment"]').val();


                if (depValue != null && depValue > 0) {
                    splitBalance.val(depValue);
                 }
                else {
                    splitBalance.val(payValue);
                }


                $('.splitLineAmount').each(function () {

                    if (depValue != null && depValue > 0) {
                        var amt = $(this).val() == "" ? 0 : $(this).val();
                        depValue = depValue - amt;
                        splitBalance.val(depValue);
                    }
                    else {
                         var amt = $(this).val() == "" ? 0 : $(this).val();
                        payValue = payValue - amt;
                        splitBalance.val(payValue);
                    }
                });

                splitBalanceDisplay.val(splitBalance.val());

        }

         function validateBalance() {
                CalculateBalance();
        }

        function RedirectToCreate() {
            var accountRegistryId = $('#AccountRegistryId').val();
            var payment = $('#Payment').val();
            var deposit = $('#Deposit').val();
            var payee = $('#Payee').val();
            var TransactionDate = $('#TransactionDate').val();
            window.location.href = '/Transactions/Create?accountRegistryId=' + accountRegistryId + "&transDate=" + TransactionDate + "&pAmout=" + payment + "&dAmount=" + deposit + "&payee=" + payee;
        }

        function onSplitSuccess() {

                $("#createTransFormId").removeData("validator");
                $("#createTransFormId").removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse("#createTransFormId");
        }

        function onSplitBegin() {
            //$("#divSingleTrans").hide();
            $("#div_splitBody").show();
        }
    </script>
}
